package org.semanticweb.owlapi.oboformat.parser;

import static org.junit.Assert.assertEquals;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_ALT_ID;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_AUTO_GENERATED_BY;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_BROAD;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_BUILTIN;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_COMMENT;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_CONSIDER;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_CREATED_BY;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_CREATION_DATE;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_DATA_VERSION;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_DATE;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_DEF;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_DEFAULT_NAMESPACE;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_DISJOINT_FROM;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_DISJOINT_OVER;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_DOMAIN;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_EQUIVALENT_TO;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_EQUIVALENT_TO_CHAIN;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_EXACT;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_EXPAND_ASSERTION_TO;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_EXPAND_EXPRESSION_TO;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_FORMAT_VERSION;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_HAS_SYNONYM_TYPE;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_HOLDS_OVER_CHAIN;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_ID;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_IDSPACE;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_IMPORT;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_INTERSECTION_OF;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_INVERSE_OF;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_IS_A;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_IS_ANONYMOUS;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_IS_ANTI_SYMMETRIC;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_IS_ASYMMETRIC;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_IS_CLASS_LEVEL_TAG;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_IS_CYCLIC;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_IS_FUNCTIONAL;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_IS_INVERSE_FUNCTIONAL;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_IS_METADATA_TAG;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_IS_OBSELETE;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_IS_REFLEXIVE;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_IS_SYMMETRIC;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_IS_TRANSITIVE;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_LOGICAL_DEFINITION_VIEW_RELATION;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_NAME;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_NAMESPACE;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_NAMESPACE_ID_RULE;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_NARROW;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_ONTOLOGY;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_OWL_AXIOMS;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_PROPERTY_VALUE;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_RANGE;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_RELATED;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_RELATIONSHIP;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_REMARK;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_REPLACED_BY;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_SAVED_BY;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_SCOPE;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_SUBSET;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_SUBSETDEF;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_SYNONYM;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_SYNONYMTYPEDEF;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_TRANSITIVE_OVER;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_TREAT_XREFS_AS_EQUIVALENT;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_TREAT_XREFS_AS_GENUS_DIFFERENTIA;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_TREAT_XREFS_AS_HAS_SUBCLASS;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_TREAT_XREFS_AS_IS_A;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_TREAT_XREFS_AS_RELATIONSHIP;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_TREAT_XREFS_AS_REVERSE_GENUS_DIFFERENTIA;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_UNION_OF;
import static org.obolibrary.oboformat.parser.OBOFormatConstants.OboFormatTag.TAG_XREF;

import org.junit.Test;

@SuppressWarnings("javadoc")
public class OBOFormatConstantsTestCase {
    @Test
    public void should() {
        assertEquals(TAG_FORMAT_VERSION.headerPriority(), 0);
        assertEquals(TAG_ONTOLOGY.headerPriority(), 85);
        assertEquals(TAG_DATA_VERSION.headerPriority(), 10);
        assertEquals(TAG_DATE.headerPriority(), 15);
        assertEquals(TAG_SAVED_BY.headerPriority(), 20);
        assertEquals(TAG_AUTO_GENERATED_BY.headerPriority(), 25);
        assertEquals(TAG_IMPORT.headerPriority(), 80);
        assertEquals(TAG_SUBSETDEF.headerPriority(), 35);
        assertEquals(TAG_SYNONYMTYPEDEF.headerPriority(), 40);
        assertEquals(TAG_DEFAULT_NAMESPACE.headerPriority(), 45);
        assertEquals(TAG_IDSPACE.headerPriority(), 50);
        assertEquals(TAG_TREAT_XREFS_AS_EQUIVALENT.headerPriority(), 55);
        assertEquals(TAG_TREAT_XREFS_AS_REVERSE_GENUS_DIFFERENTIA.headerPriority(), 10000);
        assertEquals(TAG_TREAT_XREFS_AS_GENUS_DIFFERENTIA.headerPriority(), 60);
        assertEquals(TAG_TREAT_XREFS_AS_RELATIONSHIP.headerPriority(), 65);
        assertEquals(TAG_TREAT_XREFS_AS_IS_A.headerPriority(), 70);
        assertEquals(TAG_TREAT_XREFS_AS_HAS_SUBCLASS.headerPriority(), 10000);
        assertEquals(TAG_OWL_AXIOMS.headerPriority(), 110);
        assertEquals(TAG_REMARK.headerPriority(), 75);
        assertEquals(TAG_ID.headerPriority(), 10000);
        assertEquals(TAG_NAME.headerPriority(), 10000);
        assertEquals(TAG_NAMESPACE.headerPriority(), 10000);
        assertEquals(TAG_ALT_ID.headerPriority(), 10000);
        assertEquals(TAG_DEF.headerPriority(), 10000);
        assertEquals(TAG_COMMENT.headerPriority(), 10000);
        assertEquals(TAG_SUBSET.headerPriority(), 10000);
        assertEquals(TAG_SYNONYM.headerPriority(), 10000);
        assertEquals(TAG_XREF.headerPriority(), 10000);
        assertEquals(TAG_BUILTIN.headerPriority(), 10000);
        assertEquals(TAG_PROPERTY_VALUE.headerPriority(), 100);
        assertEquals(TAG_IS_A.headerPriority(), 10000);
        assertEquals(TAG_INTERSECTION_OF.headerPriority(), 10000);
        assertEquals(TAG_UNION_OF.headerPriority(), 10000);
        assertEquals(TAG_EQUIVALENT_TO.headerPriority(), 10000);
        assertEquals(TAG_DISJOINT_FROM.headerPriority(), 10000);
        assertEquals(TAG_RELATIONSHIP.headerPriority(), 10000);
        assertEquals(TAG_CREATED_BY.headerPriority(), 10000);
        assertEquals(TAG_CREATION_DATE.headerPriority(), 10000);
        assertEquals(TAG_IS_OBSELETE.headerPriority(), 10000);
        assertEquals(TAG_REPLACED_BY.headerPriority(), 10000);
        assertEquals(TAG_IS_ANONYMOUS.headerPriority(), 10000);
        assertEquals(TAG_DOMAIN.headerPriority(), 10000);
        assertEquals(TAG_RANGE.headerPriority(), 10000);
        assertEquals(TAG_IS_ANTI_SYMMETRIC.headerPriority(), 10000);
        assertEquals(TAG_IS_CYCLIC.headerPriority(), 10000);
        assertEquals(TAG_IS_REFLEXIVE.headerPriority(), 10000);
        assertEquals(TAG_IS_SYMMETRIC.headerPriority(), 10000);
        assertEquals(TAG_IS_TRANSITIVE.headerPriority(), 10000);
        assertEquals(TAG_IS_FUNCTIONAL.headerPriority(), 10000);
        assertEquals(TAG_IS_INVERSE_FUNCTIONAL.headerPriority(), 10000);
        assertEquals(TAG_TRANSITIVE_OVER.headerPriority(), 10000);
        assertEquals(TAG_HOLDS_OVER_CHAIN.headerPriority(), 10000);
        assertEquals(TAG_EQUIVALENT_TO_CHAIN.headerPriority(), 10000);
        assertEquals(TAG_DISJOINT_OVER.headerPriority(), 10000);
        assertEquals(TAG_EXPAND_ASSERTION_TO.headerPriority(), 10000);
        assertEquals(TAG_EXPAND_EXPRESSION_TO.headerPriority(), 10000);
        assertEquals(TAG_IS_CLASS_LEVEL_TAG.headerPriority(), 10000);
        assertEquals(TAG_IS_METADATA_TAG.headerPriority(), 10000);
        assertEquals(TAG_CONSIDER.headerPriority(), 10000);
        assertEquals(TAG_INVERSE_OF.headerPriority(), 10000);
        assertEquals(TAG_IS_ASYMMETRIC.headerPriority(), 10000);
        assertEquals(TAG_NAMESPACE_ID_RULE.headerPriority(), 46);
        assertEquals(TAG_LOGICAL_DEFINITION_VIEW_RELATION.headerPriority(), 10000);
        assertEquals(TAG_SCOPE.headerPriority(), 10000);
        assertEquals(TAG_HAS_SYNONYM_TYPE.headerPriority(), 10000);
        assertEquals(TAG_BROAD.headerPriority(), 10000);
        assertEquals(TAG_NARROW.headerPriority(), 10000);
        assertEquals(TAG_EXACT.headerPriority(), 10000);
        assertEquals(TAG_RELATED.headerPriority(), 10000);
        assertEquals(TAG_FORMAT_VERSION.tagPriority(), 10000);
        assertEquals(TAG_ONTOLOGY.tagPriority(), 10000);
        assertEquals(TAG_DATA_VERSION.tagPriority(), 10000);
        assertEquals(TAG_DATE.tagPriority(), 10000);
        assertEquals(TAG_SAVED_BY.tagPriority(), 10000);
        assertEquals(TAG_AUTO_GENERATED_BY.tagPriority(), 10000);
        assertEquals(TAG_IMPORT.tagPriority(), 10000);
        assertEquals(TAG_SUBSETDEF.tagPriority(), 10000);
        assertEquals(TAG_SYNONYMTYPEDEF.tagPriority(), 10000);
        assertEquals(TAG_DEFAULT_NAMESPACE.tagPriority(), 10000);
        assertEquals(TAG_IDSPACE.tagPriority(), 10000);
        assertEquals(TAG_TREAT_XREFS_AS_EQUIVALENT.tagPriority(), 10000);
        assertEquals(TAG_TREAT_XREFS_AS_REVERSE_GENUS_DIFFERENTIA.tagPriority(), 10000);
        assertEquals(TAG_TREAT_XREFS_AS_GENUS_DIFFERENTIA.tagPriority(), 10000);
        assertEquals(TAG_TREAT_XREFS_AS_RELATIONSHIP.tagPriority(), 10000);
        assertEquals(TAG_TREAT_XREFS_AS_IS_A.tagPriority(), 10000);
        assertEquals(TAG_TREAT_XREFS_AS_HAS_SUBCLASS.tagPriority(), 10000);
        assertEquals(TAG_OWL_AXIOMS.tagPriority(), 10000);
        assertEquals(TAG_REMARK.tagPriority(), 10000);
        assertEquals(TAG_ID.tagPriority(), 5);
        assertEquals(TAG_NAME.tagPriority(), 15);
        assertEquals(TAG_NAMESPACE.tagPriority(), 20);
        assertEquals(TAG_ALT_ID.tagPriority(), 25);
        assertEquals(TAG_DEF.tagPriority(), 30);
        assertEquals(TAG_COMMENT.tagPriority(), 35);
        assertEquals(TAG_SUBSET.tagPriority(), 40);
        assertEquals(TAG_SYNONYM.tagPriority(), 45);
        assertEquals(TAG_XREF.tagPriority(), 50);
        assertEquals(TAG_BUILTIN.tagPriority(), 55);
        assertEquals(TAG_PROPERTY_VALUE.tagPriority(), 98);
        assertEquals(TAG_IS_A.tagPriority(), 65);
        assertEquals(TAG_INTERSECTION_OF.tagPriority(), 70);
        assertEquals(TAG_UNION_OF.tagPriority(), 80);
        assertEquals(TAG_EQUIVALENT_TO.tagPriority(), 85);
        assertEquals(TAG_DISJOINT_FROM.tagPriority(), 90);
        assertEquals(TAG_RELATIONSHIP.tagPriority(), 95);
        assertEquals(TAG_CREATED_BY.tagPriority(), 130);
        assertEquals(TAG_CREATION_DATE.tagPriority(), 140);
        assertEquals(TAG_IS_OBSELETE.tagPriority(), 110);
        assertEquals(TAG_REPLACED_BY.tagPriority(), 115);
        assertEquals(TAG_IS_ANONYMOUS.tagPriority(), 10);
        assertEquals(TAG_DOMAIN.tagPriority(), 10000);
        assertEquals(TAG_RANGE.tagPriority(), 10000);
        assertEquals(TAG_IS_ANTI_SYMMETRIC.tagPriority(), 10000);
        assertEquals(TAG_IS_CYCLIC.tagPriority(), 10000);
        assertEquals(TAG_IS_REFLEXIVE.tagPriority(), 10000);
        assertEquals(TAG_IS_SYMMETRIC.tagPriority(), 10000);
        assertEquals(TAG_IS_TRANSITIVE.tagPriority(), 10000);
        assertEquals(TAG_IS_FUNCTIONAL.tagPriority(), 10000);
        assertEquals(TAG_IS_INVERSE_FUNCTIONAL.tagPriority(), 10000);
        assertEquals(TAG_TRANSITIVE_OVER.tagPriority(), 10000);
        assertEquals(TAG_HOLDS_OVER_CHAIN.tagPriority(), 60);
        assertEquals(TAG_EQUIVALENT_TO_CHAIN.tagPriority(), 10000);
        assertEquals(TAG_DISJOINT_OVER.tagPriority(), 10000);
        assertEquals(TAG_EXPAND_ASSERTION_TO.tagPriority(), 10000);
        assertEquals(TAG_EXPAND_EXPRESSION_TO.tagPriority(), 10000);
        assertEquals(TAG_IS_CLASS_LEVEL_TAG.tagPriority(), 10000);
        assertEquals(TAG_IS_METADATA_TAG.tagPriority(), 10000);
        assertEquals(TAG_CONSIDER.tagPriority(), 120);
        assertEquals(TAG_INVERSE_OF.tagPriority(), 10000);
        assertEquals(TAG_IS_ASYMMETRIC.tagPriority(), 10000);
        assertEquals(TAG_NAMESPACE_ID_RULE.tagPriority(), 10000);
        assertEquals(TAG_LOGICAL_DEFINITION_VIEW_RELATION.tagPriority(), 10000);
        assertEquals(TAG_SCOPE.tagPriority(), 10000);
        assertEquals(TAG_HAS_SYNONYM_TYPE.tagPriority(), 10000);
        assertEquals(TAG_BROAD.tagPriority(), 10000);
        assertEquals(TAG_NARROW.tagPriority(), 10000);
        assertEquals(TAG_EXACT.tagPriority(), 10000);
        assertEquals(TAG_RELATED.tagPriority(), 10000);
        assertEquals(TAG_FORMAT_VERSION.typeDefPriority(), 10000);
        assertEquals(TAG_ONTOLOGY.typeDefPriority(), 10000);
        assertEquals(TAG_DATA_VERSION.typeDefPriority(), 10000);
        assertEquals(TAG_DATE.typeDefPriority(), 10000);
        assertEquals(TAG_SAVED_BY.typeDefPriority(), 10000);
        assertEquals(TAG_AUTO_GENERATED_BY.typeDefPriority(), 10000);
        assertEquals(TAG_IMPORT.typeDefPriority(), 10000);
        assertEquals(TAG_SUBSETDEF.typeDefPriority(), 10000);
        assertEquals(TAG_SYNONYMTYPEDEF.typeDefPriority(), 10000);
        assertEquals(TAG_DEFAULT_NAMESPACE.typeDefPriority(), 10000);
        assertEquals(TAG_IDSPACE.typeDefPriority(), 10000);
        assertEquals(TAG_TREAT_XREFS_AS_EQUIVALENT.typeDefPriority(), 10000);
        assertEquals(TAG_TREAT_XREFS_AS_REVERSE_GENUS_DIFFERENTIA.typeDefPriority(), 10000);
        assertEquals(TAG_TREAT_XREFS_AS_GENUS_DIFFERENTIA.typeDefPriority(), 10000);
        assertEquals(TAG_TREAT_XREFS_AS_RELATIONSHIP.typeDefPriority(), 10000);
        assertEquals(TAG_TREAT_XREFS_AS_IS_A.typeDefPriority(), 10000);
        assertEquals(TAG_TREAT_XREFS_AS_HAS_SUBCLASS.typeDefPriority(), 10000);
        assertEquals(TAG_OWL_AXIOMS.typeDefPriority(), 10000);
        assertEquals(TAG_REMARK.typeDefPriority(), 10000);
        assertEquals(TAG_ID.typeDefPriority(), 5);
        assertEquals(TAG_NAME.typeDefPriority(), 15);
        assertEquals(TAG_NAMESPACE.typeDefPriority(), 20);
        assertEquals(TAG_ALT_ID.typeDefPriority(), 25);
        assertEquals(TAG_DEF.typeDefPriority(), 30);
        assertEquals(TAG_COMMENT.typeDefPriority(), 35);
        assertEquals(TAG_SUBSET.typeDefPriority(), 40);
        assertEquals(TAG_SYNONYM.typeDefPriority(), 45);
        assertEquals(TAG_XREF.typeDefPriority(), 50);
        assertEquals(TAG_BUILTIN.typeDefPriority(), 70);
        assertEquals(TAG_PROPERTY_VALUE.typeDefPriority(), 55);
        assertEquals(TAG_IS_A.typeDefPriority(), 115);
        assertEquals(TAG_INTERSECTION_OF.typeDefPriority(), 120);
        assertEquals(TAG_UNION_OF.typeDefPriority(), 125);
        assertEquals(TAG_EQUIVALENT_TO.typeDefPriority(), 130);
        assertEquals(TAG_DISJOINT_FROM.typeDefPriority(), 135);
        assertEquals(TAG_RELATIONSHIP.typeDefPriority(), 165);
        assertEquals(TAG_CREATED_BY.typeDefPriority(), 191);
        assertEquals(TAG_CREATION_DATE.typeDefPriority(), 192);
        assertEquals(TAG_IS_OBSELETE.typeDefPriority(), 169);
        assertEquals(TAG_REPLACED_BY.typeDefPriority(), 185);
        assertEquals(TAG_IS_ANONYMOUS.typeDefPriority(), 10);
        assertEquals(TAG_DOMAIN.typeDefPriority(), 60);
        assertEquals(TAG_RANGE.typeDefPriority(), 65);
        assertEquals(TAG_IS_ANTI_SYMMETRIC.typeDefPriority(), 75);
        assertEquals(TAG_IS_CYCLIC.typeDefPriority(), 80);
        assertEquals(TAG_IS_REFLEXIVE.typeDefPriority(), 85);
        assertEquals(TAG_IS_SYMMETRIC.typeDefPriority(), 90);
        assertEquals(TAG_IS_TRANSITIVE.typeDefPriority(), 100);
        assertEquals(TAG_IS_FUNCTIONAL.typeDefPriority(), 105);
        assertEquals(TAG_IS_INVERSE_FUNCTIONAL.typeDefPriority(), 110);
        assertEquals(TAG_TRANSITIVE_OVER.typeDefPriority(), 145);
        assertEquals(TAG_HOLDS_OVER_CHAIN.typeDefPriority(), 71);
        assertEquals(TAG_EQUIVALENT_TO_CHAIN.typeDefPriority(), 155);
        assertEquals(TAG_DISJOINT_OVER.typeDefPriority(), 160);
        assertEquals(TAG_EXPAND_ASSERTION_TO.typeDefPriority(), 195);
        assertEquals(TAG_EXPAND_EXPRESSION_TO.typeDefPriority(), 200);
        assertEquals(TAG_IS_CLASS_LEVEL_TAG.typeDefPriority(), 210);
        assertEquals(TAG_IS_METADATA_TAG.typeDefPriority(), 205);
        assertEquals(TAG_CONSIDER.typeDefPriority(), 190);
        assertEquals(TAG_INVERSE_OF.typeDefPriority(), 140);
        assertEquals(TAG_IS_ASYMMETRIC.typeDefPriority(), 10000);
        assertEquals(TAG_NAMESPACE_ID_RULE.typeDefPriority(), 10000);
        assertEquals(TAG_LOGICAL_DEFINITION_VIEW_RELATION.typeDefPriority(), 10000);
        assertEquals(TAG_SCOPE.typeDefPriority(), 10000);
        assertEquals(TAG_HAS_SYNONYM_TYPE.typeDefPriority(), 10000);
        assertEquals(TAG_BROAD.typeDefPriority(), 10000);
        assertEquals(TAG_NARROW.typeDefPriority(), 10000);
        assertEquals(TAG_EXACT.typeDefPriority(), 10000);
        assertEquals(TAG_RELATED.typeDefPriority(), 10000);

    }
}
